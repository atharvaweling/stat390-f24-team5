import cv2
import numpy as np
from PIL import Image
import os
from skimage.metrics import structural_similarity as ssim #structural similarity index 
from skimage.feature import hog # image structure and texture
from collections import defaultdict
import matplotlib.pyplot as plt

# HOG - Histogram of Oriented Gradients
def compute_hog_features(tissue):
    tissue_resized = np.array(Image.fromarray(tissue).resize((512, 1024)))
    gray_tissue = cv2.cvtColor(tissue_resized, cv2.COLOR_RGB2GRAY)
    hog_features, hog_image = hog(gray_tissue, orientations=9, pixels_per_cell=(16, 16), cells_per_block=(2, 2), visualize=True, block_norm='L2-Hys') #calculates textures and gradients
    # plt.figure(figsize=(8, 4))
    # plt.subplot(1, 2, 1)
    # plt.imshow(gray_tissue, cmap='gray')
    # plt.title('Input image')

    # plt.subplot(1, 2, 2)
    # plt.imshow(hog_image, cmap='gray')
    # plt.title('HOG features')
    # plt.show()
    return hog_features

# SSIM - structural similarity
def compute_ssim(tissue1, tissue2):
    tissue1_resized = cv2.resize(tissue1, (256, 256))
    tissue2_resized = cv2.resize(tissue2, (256, 256))
    gray1 = cv2.cvtColor(tissue1_resized, cv2.COLOR_RGB2GRAY)
    gray2 = cv2.cvtColor(tissue2_resized, cv2.COLOR_RGB2GRAY)
    score, ssim_map = ssim(gray1, gray2, full=True) # only want similarity score, not map
    # plt.imshow(ssim_map, cmap='gray')
    # plt.colorbar()
    # plt.title(f'SSIM Map,(Global SSIM: {score:.2f})')
    # plt.show()
    return score

# HOG features similarity
def compute_similarity(hog_features1, hog_features2):
    if hog_features1 is None or hog_features2 is None: # None indicates no similarity
        return float('inf')  
    distance = np.linalg.norm(hog_features1 - hog_features2) # Euclidian distance
    return distance

# Load images and extract HOG and SSIM scores
def load_and_group_descriptors(tissue_files):
    descriptors = defaultdict(dict) # allows creation of empty dict for nonexistent key
    ssim_scores = defaultdict(dict)
    for tissue_file, path in tissue_files.items():
        tissue = np.array(Image.open(path).convert('RGB'))
        hog_features = compute_hog_features(tissue)
        descriptors[tissue_file] = hog_features
        ssim_scores[tissue_file] = tissue  
    return descriptors, ssim_scores

# Similarity Scores Grouping
def similarity_based_grouping(tissue_files, hog_threshold, ssim_threshold):
    descriptors, ssim_scores = load_and_group_descriptors(tissue_files)
    results = defaultdict(list)
    tissue_list = list(descriptors.keys())

    for i in range(len(tissue_list)):
        tissue1 = tissue_list[i]
        for j in range(i + 1, len(tissue_list)):
            tissue2 = tissue_list[j]
            hog_score = compute_similarity(descriptors[tissue1], descriptors[tissue2])
            ssim_score = compute_ssim(ssim_scores[tissue1], ssim_scores[tissue2])
            if hog_score < hog_threshold and ssim_score > ssim_threshold:
                results[tissue1].append((tissue2, hog_score, ssim_score))
                results[tissue2].append((tissue1, hog_score, ssim_score))

    groups = form_groupings(results, tissue_list)
    return groups

# Grouping function and handling ungrouped images
def form_groupings(results, all_tissues):
    groups = []
    used_tissues = set()

    for tissue1, similar_tissues in results.items():
        if tissue1 not in used_tissues:
            group = {tissue1}
            used_tissues.add(tissue1)
            for tissue2, _, _ in similar_tissues:
                if tissue2 not in used_tissues:
                    group.add(tissue2)
                    used_tissues.add(tissue2)
            groups.append(list(group))

    # Add remaining ungrouped images to their own group
    ungrouped_tissues = set(all_tissues) - used_tissues
    for tissue in ungrouped_tissues:
        groups.append([tissue])

    return groups

# Function to split images by patient number
def split_by_patient(tissue_folder):
    patient_groups = defaultdict(dict)
    
    for tissue_file in os.listdir(tissue_folder):
        if tissue_file.endswith('.tif'):
            # Extract the patient ID
            patient_id = tissue_file.split('_')[0]
            path = os.path.join(tissue_folder, tissue_file)
            patient_groups[patient_id][tissue_file] = path
    
    return patient_groups

# Function similarity grouping within each patient group
def achieve_desired_groupings(tissue_folder, hog_threshold, ssim_threshold):
    patient_groups = split_by_patient(tissue_folder)
    final_groupings = {}

    for patient_id, tissue_files in patient_groups.items():
        # Group based on similarity
        patient_groupings = similarity_based_grouping(tissue_files, hog_threshold, ssim_threshold)
        final_groupings[patient_id] = patient_groupings
    
    return final_groupings

# Clean print function for better readability
def print_groupings(groupings):
    for patient_id, groups in groupings.items():
        print(f"Patient: {patient_id}")
        for i, group in enumerate(groups, 1):
            print(f"  Group {i}: {', '.join(group)}")
        print()

# Define the image folder path
tissue_folder = "/Users/parth/Desktop/STAT390/Presentation_3/Images"

# Running the function with adjusted thresholds to achieve the desired groupings
desired_groupings = achieve_desired_groupings(tissue_folder, hog_threshold=50, ssim_threshold=0.155)

# Print out the groupings
print_groupings(desired_groupings)
